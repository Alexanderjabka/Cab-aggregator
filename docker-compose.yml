version: '3.8'

services:
  eureka-server:
    build:
      context: ./eureka-server
    container_name: eureka-server
    ports:
      - "8081:8081"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8081/eureka/
      SPRING_PROFILES_ACTIVE: production
      MANAGEMENT_TRACING_ENABLED: "true"
    networks:
      - app-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "8082:8082"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8081/eureka/
      SPRING_SLEUTH_SAMPLER_PROBABILITY: "1.0"
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_ENABLED: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - eureka-server
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - eureka-server
    networks:
      - app-network

  zipkin:
    image: openzipkin/zipkin:2.24.0
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      STORAGE_TYPE: mem
      QUERY_PORT: 9411
    networks:
      - app-network

  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana
    environment:
      GF_FEATURE_TOGGLES_ENABLE: tracing
      GF_AUTH_ANONYMOUS_ENABLED: "true"
    depends_on:
      - prometheus
      - loki
    networks:
      - app-network

  passenger-service:
    build:
      context: ./passenger-service
    container_name: passenger-service
    ports:
      - "8083:8083"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8081/eureka/
      SPRING_SLEUTH_SAMPLER_PROBABILITY: "1.0"
      SPRING_DATASOURCE_URL: jdbc:postgresql://passenger-db:5432/passenger_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_ENABLED: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - eureka-server
      - passenger-db
    networks:
      - app-network

  passenger-db:
    image: postgres:15.4
    container_name: passenger-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: passenger_db
    volumes:
      - passenger-data:/var/lib/postgresql/data
    networks:
      - app-network

  driver-service:
    build:
      context: ./driver-service
    container_name: driver-service
    ports:
      - "8084:8084"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8081/eureka/
      SPRING_SLEUTH_SAMPLER_PROBABILITY: "1.0"
      SPRING_DATASOURCE_URL: jdbc:postgresql://driver-db:5432/driver_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_ENABLED: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - eureka-server
      - driver-db
    networks:
      - app-network

  driver-db:
    image: postgres:15.4
    container_name: driver-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: driver_db
    volumes:
      - driver-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network

  ride-service:
    build:
      context: ./ride-service
    container_name: ride-service
    depends_on:
      - kafka
      - ride-db
      - eureka-server
    ports:
      - "8085:8085"
    env_file:
      - .env
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8081/eureka/
      SPRING_SLEUTH_SAMPLER_PROBABILITY: "1.0"
      SPRING_DATASOURCE_URL: jdbc:postgresql://ride-db:5432/ride_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_ENABLED: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_RETRIES: 3
      SPRING_KAFKA_PRODUCER_ACKS: all
    networks:
      - app-network

  ride-db:
    image: postgres:15.4
    container_name: ride-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ride_db
    volumes:
      - ride-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - app-network

  rating-service:
    build:
      context: ./rating-service
    container_name: rating-service
    depends_on:
      - kafka
      - rating-db
      - eureka-server
    ports:
      - "8086:8086"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8081/eureka/
      SPRING_SLEUTH_SAMPLER_PROBABILITY: "1.0"
      SPRING_DATASOURCE_URL: jdbc:postgresql://rating-db:5432/rating_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_ENABLED: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_ENABLE_AUTO_COMMIT: "false"
    networks:
      - app-network

  rating-db:
    image: postgres:15.4
    container_name: rating-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rating_db
    volumes:
      - rating-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    depends_on:
      - kafka
    networks:
      - app-network

volumes:
  grafana-storage:
  passenger-data:
  driver-data:
  ride-data:
  rating-data:

networks:
  app-network:
    driver: bridge